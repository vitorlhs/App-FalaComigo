/**
 * @license
 * Copyright 2021 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
import { __decorate, __metadata } from "tslib";
// Required for @ariaProperty
// tslint:disable:no-new-decorators
import '../../focus/focus-ring.js';
import '../../icon/icon.js';
import '../../ripple/ripple.js';
import { html, LitElement } from 'lit';
import { property, queryAsync, state } from 'lit/decorators.js';
import { classMap } from 'lit/directives/class-map.js';
import { ifDefined } from 'lit/directives/if-defined.js';
import { when } from 'lit/directives/when.js';
import { ariaProperty } from '../../decorators/aria-property.js';
import { pointerPress, shouldShowStrongFocus } from '../../focus/strong-focus.js';
import { ripple } from '../../ripple/directive.js';
/**
 * @fires icon-button-toggle-change {CustomEvent<{selected: boolean}>}
 * Dispatched whenever `selected` is changed via user click
 */
export class IconButtonToggle extends LitElement {
    constructor() {
        super(...arguments);
        /**
         * Disables the icon button and makes it non-interactive.
         */
        this.disabled = false;
        /**
         * The glyph of the icon to display from the applied icon font when toggle
         * button is selected or "on". See the associated typography tokens for more
         * info.
         */
        this.onIcon = '';
        /**
         * The glyph of the icon to display from the applied icon font when toggle
         * button is not selected or "off". See the associated typography tokens for
         * more info.
         */
        this.offIcon = '';
        /**
         * Sets the toggle button to the "on" state and displays the `onIcon`. If
         * false, sets the toggle button to the "off" state and displays the
         * `offIcon`.
         */
        this.selected = false;
        this.showFocusRing = false;
        this.showRipple = false;
        this.getRipple = () => {
            this.showRipple = true;
            return this.ripple;
        };
        this.renderRipple = () => {
            return html `<md-ripple ?disabled="${this.disabled}"></md-ripple>`;
        };
    }
    render() {
        const hasToggledAriaLabel = this.ariaLabelOn && this.ariaLabelOff;
        const ariaPressedValue = hasToggledAriaLabel ? undefined : this.selected;
        const ariaLabelValue = hasToggledAriaLabel ?
            (this.selected ? this.ariaLabelOn : this.ariaLabelOff) :
            this.ariaLabel;
        return html `<button
          class="md3-icon-button ${classMap(this.getRenderClasses())}"
          aria-pressed="${ifDefined(ariaPressedValue)}"
          aria-label="${ifDefined(ariaLabelValue)}"
          ?disabled="${this.disabled}"
          @focus="${this.handleFocus}"
          @blur="${this.handleBlur}"
          @pointerdown="${this.handlePointerDown}"
          @click="${this.handleClick}"
          ${ripple(this.getRipple)}>
        ${this.renderFocusRing()}
        ${when(this.showRipple, this.renderRipple)}
        ${this.renderTouchTarget()}
        <span class="md3-icon-button__icon">
          <slot name="offIcon">${this.renderIcon(this.offIcon)}</slot>
        </span>
        <span class="md3-icon-button__icon md3-icon-button__icon--on">
          <slot name="onIcon">${this.renderIcon(this.onIcon)}</slot>
        </span>
      </button>`;
    }
    getRenderClasses() {
        return {
            'md3-icon-button--on': this.selected,
        };
    }
    renderIcon(icon) {
        return icon ? html `<md-icon>${icon}</md-icon>` : '';
    }
    renderTouchTarget() {
        return html `<span class="md3-icon-button__touch"></span>`;
    }
    renderFocusRing() {
        return html `<md-focus-ring .visible="${this.showFocusRing}"></md-focus-ring>`;
    }
    handlePointerDown(e) {
        pointerPress();
        this.showFocusRing = shouldShowStrongFocus();
    }
    handleFocus() {
        this.showFocusRing = shouldShowStrongFocus();
    }
    handleBlur() {
        this.showFocusRing = false;
    }
    handleClick() {
        this.selected = !this.selected;
        const detail = { selected: this.selected };
        this.dispatchEvent(new CustomEvent('icon-button-toggle-change', { detail, bubbles: true, composed: true }));
    }
}
__decorate([
    ariaProperty,
    property({ type: String, attribute: 'data-aria-label' }),
    __metadata("design:type", String)
], IconButtonToggle.prototype, "ariaLabel", void 0);
__decorate([
    property({ type: Boolean, reflect: true }),
    __metadata("design:type", Object)
], IconButtonToggle.prototype, "disabled", void 0);
__decorate([
    property({ type: String }),
    __metadata("design:type", Object)
], IconButtonToggle.prototype, "onIcon", void 0);
__decorate([
    property({ type: String }),
    __metadata("design:type", Object)
], IconButtonToggle.prototype, "offIcon", void 0);
__decorate([
    property({ type: String }),
    __metadata("design:type", String)
], IconButtonToggle.prototype, "ariaLabelOn", void 0);
__decorate([
    property({ type: String }),
    __metadata("design:type", String)
], IconButtonToggle.prototype, "ariaLabelOff", void 0);
__decorate([
    property({ type: Boolean, reflect: true }),
    __metadata("design:type", Object)
], IconButtonToggle.prototype, "selected", void 0);
__decorate([
    queryAsync('md-ripple'),
    __metadata("design:type", Promise)
], IconButtonToggle.prototype, "ripple", void 0);
__decorate([
    state(),
    __metadata("design:type", Object)
], IconButtonToggle.prototype, "showFocusRing", void 0);
__decorate([
    state(),
    __metadata("design:type", Object)
], IconButtonToggle.prototype, "showRipple", void 0);
//# sourceMappingURL=icon-button-toggle.js.map