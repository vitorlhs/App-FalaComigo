/**
 * @license
 * Copyright 2021 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
import '../../focus/focus-ring.js';
import '../../icon/icon.js';
import '../../ripple/ripple.js';
import { LitElement, TemplateResult } from 'lit';
import { ClassInfo } from 'lit/directives/class-map.js';
import { MdRipple } from '../../ripple/ripple.js';
/**
 * @fires icon-button-toggle-change {CustomEvent<{selected: boolean}>}
 * Dispatched whenever `selected` is changed via user click
 */
export declare class IconButtonToggle extends LitElement {
    ariaLabel: string;
    /**
     * Disables the icon button and makes it non-interactive.
     */
    disabled: boolean;
    /**
     * The glyph of the icon to display from the applied icon font when toggle
     * button is selected or "on". See the associated typography tokens for more
     * info.
     */
    onIcon: string;
    /**
     * The glyph of the icon to display from the applied icon font when toggle
     * button is not selected or "off". See the associated typography tokens for
     * more info.
     */
    offIcon: string;
    /**
     * The `aria-label` of the button when the toggle button is selected or "on".
     */
    ariaLabelOn: string;
    /**
     * The `aria-label` of the button when the toggle button is not selected or
     * "off".
     */
    ariaLabelOff: string;
    /**
     * Sets the toggle button to the "on" state and displays the `onIcon`. If
     * false, sets the toggle button to the "off" state and displays the
     * `offIcon`.
     */
    selected: boolean;
    ripple: Promise<MdRipple | null>;
    protected showFocusRing: boolean;
    protected showRipple: boolean;
    protected readonly getRipple: () => Promise<MdRipple>;
    protected readonly renderRipple: () => TemplateResult<1>;
    protected render(): TemplateResult;
    protected getRenderClasses(): ClassInfo;
    protected renderIcon(icon: string): TemplateResult | string;
    protected renderTouchTarget(): TemplateResult;
    protected renderFocusRing(): TemplateResult;
    protected handlePointerDown(e: PointerEvent): void;
    protected handleFocus(): void;
    protected handleBlur(): void;
    protected handleClick(): void;
}
